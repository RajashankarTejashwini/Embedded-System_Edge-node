#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/drivers/gpio.h>
#include <zephyr/smf.h>
#include <zephyr/logging/log.h>

#include <zephyr/bluetooth/bluetooth.h>
#include <zephyr/bluetooth/gap.h>
#include <zephyr/bluetooth/gatt.h>
#include <zephyr/bluetooth/uuid.h>
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/conn.h>

LOG_MODULE_REGISTER(ble_test, LOG_LEVEL_DBG);

static struct bt_le_adv_param* adv_param = BT_LE_ADV_PARAM(
    (BT_LE_ADV_OPT_CONNECTABLE|BT_LE_ADV_OPT_USE_IDENTITY), /* Connectable advertising and use identity address */
    800, /*Min Advertising Interval 500ms (800*0.625ms) */
    801, /*Max Advertising Interval 500.625ms (801*0.625ms)*/
    NULL); /* Set to NULL for undirected advertising*/

static const struct bt_data adv_data[] = {
	/* STEP 3.1 - Set the flags and populate the device name in the advertising packet */
	BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),
	BT_DATA(BT_DATA_NAME_COMPLETE, CONFIG_BT_DEVICE_NAME, (sizeof(CONFIG_BT_DEVICE_NAME) - 1)),
};

static const struct bt_data scan_data[] = {
	/* STEP 3.2.2 - Include the 16-bytes (128-Bits) UUID of the LBS service in the scan response packet */
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_128_ENCODE(0x00001523, 0x1212, 0xefde, 0x1523, 0x785fdeadbeef)),
};

struct bt_conn* our_conn = NULL;

void on_connected(struct bt_conn *conn, uint8_t err) {
    if (err) {
        LOG_ERR("Connection error %d", err);
        return;
    }
    LOG_INF("Connected");
    our_conn = bt_conn_ref(conn);
}

void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
    LOG_INF("Disconnected. Reason %d", reason);
    bt_conn_unref(our_conn);
}

struct bt_conn_cb bt_conn_callbacks = {
    .connected = on_connected,
    .disconnected = on_disconnected,
};

void main(void) {
    int err;
    LOG_INF("Setting up our bluetooth...");

    bt_addr_le_t addr;
    err = bt_addr_le_from_str("FF:EE:DE:AD:BE:EF", "random", &addr);
    if (err) {
        LOG_ERR("Invalid BT address (err %d)\n", err);
        return;
    }

    err = bt_id_create(&addr, NULL);
    if (err < 0) {
        LOG_ERR("Creating new identity failed (err %d)\n", err);
        return;
    }

    bt_conn_cb_register(&bt_conn_callbacks);

    err = bt_enable(NULL);
    if (err < 0) {
        LOG_ERR("Bluetooth init failed (err %d)\n", err);
        return;
    }

    LOG_INF("Bluetooth enabled!");
    LOG_INF("Starting advertising...");

    err = bt_le_adv_start(
        adv_param, adv_data, ARRAY_SIZE(adv_data),
        scan_data, ARRAY_SIZE(scan_data));
    if (err < 0) {
        LOG_ERR("Bluetooth advertisement start failed (err %d)\n", err);
        return;
    }

    LOG_INF("Advertising started!");

    while (true) {
        k_sleep(K_SECONDS(1));
        LOG_INF("I'm alive!");
    }


}
